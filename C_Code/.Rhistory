dat
View(data_wp)
View(dat)
View(data_wp)
####################
# exercise 2.1.2
####################
# choose which sensors to plot
sensorx = datfinal[,1]
sensory = datfinal[,2]
# make simple plot
plot(sensorx, sensory)
# make more fancy plot
# first assign titles and labels to the plot, and determine its size by giving the minimum and maximum values of the sensors. Do not plot anything (the option type="n")
plot(c(min(sensorx), max(sensorx)), c(min(sensory), max(sensory)), xlab="Sensor A", ylab="Sensor B", main="NanoNose data", type="n")
# plot points for each sensor in separate colors
cols <- colors()
for(i in sort(unique(y))){
points(sensorx[y==i], sensory[y==i], col=cols[(i+1)*10])
}
# get the order that classes were gone through and plotted in in for loop
sorted <- sort(class_names, index.return=TRUE)
# add legend
legend("topright", legend=class_names[sorted$ix], fill = cols[10*(1:5)])
####################
# exercise 2.1.3
####################
# extract the means of columns
means <- colMeans(datfinal)
# subtract the column means from each row. Transpose result since apply returns a matrix corresponding to the transposed datfinal
datzeromean<- t(apply(datfinal,1,'-',means))
# check that column means are now zero (or are numerically different from zero by something on the order of 10^-14)
colMeans(datzeromean)
# get the SVD decomposition of the zero-mean data
svdres <- svd(datzeromean)
# extract the singular values from the result list, svdres
singularvals <- svdres$d
# calculate the variance explained by each PC
pcvariance <- singularvals^2/sum(singularvals^2)
# plot the cumulative proportion of variance explained by the PCs
plot(cumsum(pcvariance), main="Data variance explained by PCs", xlab="Number of PCs included in variance sum", ylab="Proportion of variance explained")
View(data_wp)
View(unique(data_wp$dato))
setwd("~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2/ML")
setwd("~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2/ML")
# Read wind power forecast file
dat = read.table("./D_Data/windpowerforecasts.dat", skip = 0, sep = ";")
# Read wind power forecast file
dat = read.table("~/D_Data/windpowerforecasts.dat", skip = 0, sep = ";")
# Read wind power forecast file
dat = read.table("path/D_Data/windpowerforecasts.dat", skip = 0, sep = ";")
path = '~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2'
# Read wind power forecast file
dat = read.table("path/D_Data/windpowerforecasts.dat", skip = 0, sep = ";")
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
dat
data_wp = dat[unique(data_wp$dato),]
View(data_wp)
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
View(dat)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
data_wp = dat[unique(data$dato),]
data_wp = dat[unique(dat$dato),]
View(data_wp)
unique(dat$dato)
dat[2017010100,]
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
data_wp = dat[unique(dat$dato),]
View(dat)
View(data_wp)
selection = unique(dat$dato)
selection
dat[2017010100,]
dat["2017010100",]
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
dat["2017010100",]
dat[1,]
match(selection, dat$dato)
selection = unique(dat$dato)
selection_index = match(selection, dat$dato)
data_wp = dat[selection_index,]
View(data_wp)
View(datfinal)
plot(data_wp$meas, data_wp$fore)
length(data_wp$meas)
plot(data_wp$meas[1:2000], data_wp$fore[1:2000])
plot(data_wp$meas[1:20], data_wp$fore[1:20])
data_wp$fore[1:20]
View(data_wp)
as.numeric(matrix(noquote(data_wp$meas[1:20])),1,20)
plot(as.numeric(matrix(noquote(data_wp$meas[1:20])),1,20),as.numeric(matrix(noquote(data_wp$fore[1:20])),1,20))
plot(as.numeric(matrix(noquote(data_wp$meas[1:200])),1,20),as.numeric(matrix(noquote(data_wp$fore[1:200])),1,200))
N_data = length(data_wp$dato)
plot(as.numeric(matrix(noquote(data_wp$meas)),1,N_data),as.numeric(matrix(noquote(data_wp$fore)),1,N_data))
N_data = length(data_wp$dato)
meas_x = as.numeric(matrix(noquote(data_wp$meas)),1,N_data)
fore_y = as.numeric(matrix(noquote(data_wp$fore)),1,N_data)
plot(meas_x,fore_y)
plot(c(min(meas_x), max(meas_x)), c(min(fore_y), max(fore_y)), xlab="Measurements", ylab="Forecats", main="Wind data", type="n")
max(meas_x)
plot(c(min(meas_x, na.rm = TRUE), max(meas_x, na.rm = TRUE)),
c(min(fore_y, na.rm = TRUE), max(fore_y, na.rm = TRUE)), xlab="Measurements", ylab="Forecats", main="Wind data", type="n")
# plot points for each sensor in separate colors
cols <- colors()
for(i in sort(unique(y))){
points(meas_x[y==i], fore_y[y==i], col=cols[(i+1)*10])
}
# get the order that classes were gone through and plotted in in for loop
sorted <- sort(class_names, index.return=TRUE)
# add legend
legend("topright", legend=class_names[sorted$ix], fill = cols[10*(1:5)])
N_data = length(data_wp$dato)
meas_x = as.numeric(matrix(noquote(data_wp$meas)),1,N_data)/10^3 # MW
fore_y = as.numeric(matrix(noquote(data_wp$fore)),1,N_data)/10^3 # MW
# Simple plot
plot(meas_x,fore_y)
# Fancy plot
plot(c(min(meas_x, na.rm = TRUE), max(meas_x, na.rm = TRUE)),
c(min(fore_y, na.rm = TRUE), max(fore_y, na.rm = TRUE)), xlab="Measurements", ylab="Forecats", main="Wind data", type="n")
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data")
rownames(datfinal)
datfinal
class_labels
rownames(data_wp) <- observations
colnames(data_wp) <- attributes
####################
# exercise 2.1.5
####################
# read data into R
dat <- read.csv("./Data/nanonose.csv", sep=",", check.names=FALSE)
dat
setwd("~/Documents/DTU/B_Semester-2/02450_MachineLearning_DataMining/Projects/Project1/02450Toolbox_R")
####################
# exercise 2.1.5
setwd("~/Documents/DTU/B_Semester-2/02450_MachineLearning_DataMining/Projects/Project1/02450Toolbox_R")
####################
# read data into R
dat <- read.csv("./Data/nanonose.csv", sep=",", check.names=FALSE)
# extract class labels of observations
class_labels <- colnames(dat)
class_labels
#
class_labels = colnames(data_wp)
class_labels
path = '~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2'
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
# Keep only one observation per h
selection = unique(dat$dato)
selection_index = match(selection, dat$dato)
data_wp = dat[selection_index,]
#
class_labels = colnames(data_wp)
class_labels
dat
####################
# exercise 2.1.5
setwd("~/Documents/DTU/B_Semester-2/02450_MachineLearning_DataMining/Projects/Project1/02450Toolbox_R")
####################
# read data into R
dat <- read.csv("./Data/nanonose.csv", sep=",", check.names=FALSE)
dat
# extract class labels of observations
class_labels <- colnames(dat)
class_labels <- class_labels[-(1:2)]
# extract attributes, i.e. sensor names
attributes <- dat[3:10,1]
attributes
class_labels
attributes
#
class_labels = colnames(data_wp)
class_labels
length(class_labels)
data_wp = dat[selection_index,3:24]
#
class_labels = colnames(data_wp)
class_labels
#
class_labels = colnames(data_wp)
class_labels
path = '~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2'
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
# Keep only one observation per h
selection = unique(dat$dato)
selection_index = match(selection, dat$dato)
data_wp = dat[selection_index,3:24]
data_wp = dat[selection_index,4:24]
selection
#
class_labels = colnames(data_wp)
observations = selection
#
N_data = length(data_wp$dato)
meas_x = as.numeric(matrix(noquote(data_wp$meas)),1,N_data)/10^3 # MW
fore_y = as.numeric(matrix(noquote(data_wp$fore)),1,N_data)/10^3 # MW
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
# Fancy plot
plot(c(min(meas_x, na.rm = TRUE), max(meas_x, na.rm = TRUE)),
c(min(fore_y, na.rm = TRUE), max(fore_y, na.rm = TRUE)), xlab="Measurements", ylab="Forecats", main="Wind data", type="n")
# plot points for each sensor in separate colors
cols <- colors()
for(i in sort(unique(y))){
points(meas_x[y==i], fore_y[y==i], col=cols[(i+1)*10])
}
# get the order that classes were gone through and plotted in in for loop
sorted <- sort(class_labels, index.return=TRUE)
# add legend
legend("topright", legend=class_names[sorted$ix], fill = cols[10*(1:5)])
class_labels
# add legend
legend("topright", legend=class_labels[sorted$ix], fill = cols[10*(1:5)])
# Fancy plot
plot(c(min(meas_x, na.rm = TRUE), max(meas_x, na.rm = TRUE)),
c(min(fore_y, na.rm = TRUE), max(fore_y, na.rm = TRUE)), xlab="Measurements", ylab="Forecats", main="Wind data", type="n")
# plot points for each sensor in separate colors
cols <- colors()
for(i in sort(unique(y))){
points(meas_x[y==i], fore_y[y==i], col=cols[(i+1)*10])
}
# get the order that classes were gone through and plotted in in for loop
sorted <- sort(class_labels, index.return=TRUE)
# add legend
legend("topright", legend=class_labels[sorted$ix], fill = cols[10*(1:5)])
# add legend
legend("topright", legend=class_labels[sorted$ix], fill = cols[10*(1:5)], cex = 0.5)
sort(unique(y))
#
y <- as.numeric(as.factor(class_labels))
y
class_labels
y <- y-1
#
N_data = length(data_wp$dato)
meas_x = as.numeric(matrix(noquote(data_wp$meas)),1,N_data)/10^3 # MW
fore_y = as.numeric(matrix(noquote(data_wp$fore)),1,N_data)/10^3 # MW
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
# Fancy plot
plot(c(min(meas_x, na.rm = TRUE), max(meas_x, na.rm = TRUE)),
c(min(fore_y, na.rm = TRUE), max(fore_y, na.rm = TRUE)), xlab="Measurements", ylab="Forecats", main="Wind data", type="n")
# plot points for each sensor in separate colors
cols <- colors()
for(i in sort(unique(y))){
points(meas_x[y==i], fore_y[y==i], col=cols[(i+1)*10])
}
# get the order that classes were gone through and plotted in in for loop
sorted <- sort(class_labels, index.return=TRUE)
# add legend
legend("topright", legend=class_labels[sorted$ix], fill = cols[10*(1:5)], cex = 0.5)
meas_x
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
plot(meas_x,meas_x,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
plot(meas_x,meas_x,xlab="Measurements", ylab="Forecats", main="Wind data [MW] : perfect forecast")
lines(meas_x,meas_x,col = "red")
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
lines(meas_x,meas_x,col = "red")
lengen("bottomright", legend = "Perfect forecast", col ="red", lty = 1)
lenged("bottomright", legend = "Perfect forecast", col ="red", lty = 1)
legend("bottomright", legend = "Perfect forecast", col ="red", lty = 1)
####################
# extract the means of columns
means <- colMeans(data_wp)
data_wp
typeof(data_wp)
N_data
#
N_data = length(data_wp$dato)
N_data
path = '~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2'
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
# Keep only one observation per h
selection = unique(dat$dato)
selection_index = match(selection, dat$dato)
data_wp = dat[selection_index,4:24]
#
class_labels = colnames(data_wp)
observations = selection
#
N_data = length(data_wp$dato)
N_data
#
N_data = length(data_wp$meas)
N_data
class_labels
as.numeric(matrix(noquote(data_wp$meas)),length(class_labels),N_data)/10^3
####################
# extract the means of columns
data_wp = as.numeric(matrix(noquote(data_wp$meas)),length(class_labels),N_data)/10^3
means <- colMeans()
means <- colMeans(data_wp)
colMeans(data_wp)
means <- colMeans(data_wp[,2:3])
mean(data_wp$meas)
data_wp
mean(data_wp[,1])
data_wp[,1]
data_wp[,2]
data_wp[1,]
data_wp$
length(class_labels)
N_data
####################
# extract the means of columns
data_wp = as.numeric(matrix(noquote(data_wp$meas)),N_data,length(class_labels))/10^3
path = '~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2'
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
# Keep only one observation per h
selection = unique(dat$dato)
selection_index = match(selection, dat$dato)
data_wp = dat[selection_index,4:24]
#
class_labels = colnames(data_wp)
observations = selection
#
N_data = length(data_wp$meas)
meas_x = as.numeric(matrix(noquote(data_wp$meas)),1,N_data)/10^3 # MW
fore_y = as.numeric(matrix(noquote(data_wp$fore)),1,N_data)/10^3 # MW
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
lines(meas_x,meas_x,col = "red")
legend("bottomright", legend = "Perfect forecast", col ="red", lty = 1)
####################
# extract the means of columns
data_wp = as.numeric(matrix(noquote(data_wp$meas)),N_data,length(class_labels))/10^3
data_wp
means <- colMeans(data_wp)
data_wp
data_wp[,1]
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
# Keep only one observation per h
selection = unique(dat$dato)
selection_index = match(selection, dat$dato)
data_wp = dat[selection_index,4:24]
#
class_labels = colnames(data_wp)
observations = selection
#
N_data = length(data_wp$meas)
meas_x = as.numeric(matrix(noquote(data_wp$meas)),1,N_data)/10^3 # MW
fore_y = as.numeric(matrix(noquote(data_wp$fore)),1,N_data)/10^3 # MW
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
lines(meas_x,meas_x,col = "red")
legend("bottomright", legend = "Perfect forecast", col ="red", lty = 1)
####################
# extract the means of columns
data_wp = as.numeric(matrix(noquote(data_wp$meas),N_data,length(class_labels)))/10^3
matrix(noquote(data_wp$meas),N_data,length(class_labels))
path = '~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2'
###################################
###################################
# Read wind power forecast file
dat = read.table(paste0(path,"/D_Data/windpowerforecasts.dat"), skip = 0, sep = ";")
# Rename the column with the 10th quantile / use the first line as colnames / delete first line
dat[1,7] = "q10"
temp_dat <- dat
temp_dat[] <- lapply(dat, as.character)
colnames(dat) <- temp_dat[1, ]
dat <- dat[-1 ,]
temp_dat <- NULL
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dato = sub("^(\\d{10}).*$", "\\1", dat$dato)
# Change the format of dato : from YYYYMMDDHH00 to YYYYMMDDHH
dat$dati = sub("^(\\d{10}).*$", "\\1", dat$dati)
# Keep only one observation per h
selection = unique(dat$dato)
selection_index = match(selection, dat$dato)
data_wp = dat[selection_index,4:24]
#
class_labels = colnames(data_wp)
observations = selection
#
N_data = length(data_wp$meas)
meas_x = as.numeric(matrix(noquote(data_wp$meas)),1,N_data)/10^3 # MW
fore_y = as.numeric(matrix(noquote(data_wp$fore)),1,N_data)/10^3 # MW
# Simple plot
plot(meas_x,fore_y,xlab="Measurements", ylab="Forecats", main="Wind data [MW]")
lines(meas_x,meas_x,col = "red")
legend("bottomright", legend = "Perfect forecast", col ="red", lty = 1)
matrix(noquote(data_wp$meas),N_data,length(class_labels))
####################
# extract the means of columns
new_data_wp = as.numeric(matrix(noquote(data_wp$meas),N_data,length(class_labels)))/10^3
View(new_data_wp)
N_data
####################
# extract the means of columns
new_data_wp = as.numeric(matrix(noquote(data_wp),N_data,length(class_labels)))/10^3
matrix(noquote(data_wp),N_data,length(class_labels))
matrix(data_wp,N_data,length(class_labels))
means <- colMeans(data_wp)
data_wp
mean(data_wp$meas)
mean(data_wp$meas, na.rm = TRUE)
sum(is.na(data_wp$meas==TRUE))
View(data_wp)
data_wp
setwd("~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2/C_Code")
source("~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2/C_Code/balancing.R")
balancing(quantity_bidded, quantity_produced, spot_price, reg_up, reg_down)
# At h = specific hour
reg_up = 47 # DKK/MWh
reg_down = 32 # DKK/MWh
spot_price = 41 # DKK/MWh
quantity_bidded = 7 #MWh
quantity_produced = 5 #MWh
overall_surplus = 130 #MWh
balancing(quantity_bidded, quantity_produced, spot_price, reg_up, reg_down)
spot_price
reg_up
reg_down
5*41-2*47
