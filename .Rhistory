elspot = elspot_price_2017[elspot_price_2017$date_daily==date_bidded,]$DK1
# average the missing values by looking at the hour before and after
for (j in 2:(length(elspot)-1)){
if(is.na(elspot[j])==TRUE) elspot[j] = 0.5*(elspot[j-1]+elspot[j+1])
}
# what are the regulation prices ?
reg_down = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_DOWN
reg_up = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_UP
# Are we scheduled
schedule = get_schedule(bid_price,elspot)
## plots
if((plot_results == TRUE) & (i%%31 == 0)){
cat(i)
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
points(1:24, measured, col = "black", type = "o")
legend("topright", legend = c("measurements","contracted = forecast" ), col = c("black", "red"),
pch = "o", lty = 1)
title(main = paste0("Date of interest : ", date_bidded))
}
# Balancing market clearing
balancing_results = balancing( contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# Performance ratio
pr = performance_ratio(contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# We remember the revenue generated hourly
new_revenues = balancing_results$revenues
new_surplus = balancing_results$surplus
new_shortage = balancing_results$shortage
new_down_regulation_costs = balancing_results$down_regulation_costs
new_up_regulation_costs = balancing_results$up_regulation_costs
new_balancing_quantities = c(new_surplus,new_shortage,new_down_regulation_costs,new_up_regulation_costs,
pr)#pr$gamma, pr$total_imbalance_costs, pr$revenues_PTU,
#mean(reg_up, na.rm = TRUE), mean(reg_down,na.rm = TRUE))
# How many times have we helped / handicaped the syst by bidding this way
hours_helpg_syst = hours_helpg_syst + balancing_results$hours_helpg_syst
hours_handicp_syst = hours_handicp_syst + balancing_results$hours_handicp_syst
if (i==1){
revenues = rbind(new_revenues)
balancing_quantities = rbind(new_balancing_quantities)
}
else {
revenues = rbind(revenues, new_revenues)
balancing_quantities = rbind(balancing_quantities, new_balancing_quantities)
}
}
total_surplus = sum(balancing_quantities[,1], na.rm = TRUE)
total_shortage = sum(balancing_quantities[,2], na.rm = TRUE)
total_down_regulation_costs = sum(balancing_quantities[,3], na.rm = TRUE)
total_up_regulation_costs = sum(balancing_quantities[,4], na.rm = TRUE)
av_down_regulation_unit_costs = total_down_regulation_costs/total_surplus
av_up_regulation_unit_costs = total_up_regulation_costs/total_shortage
balancing_quantities = data.frame(surplus = balancing_quantities[,1],
shortage = balancing_quantities[,2],
down_regulation_costs = balancing_quantities[,3],
up_regulation_costs = balancing_quantities[,4],
performance_ratio = balancing_quantities[,5])#,
View(balancing_quantities)
sum(balancing_quantities$performance_ratio>100)
sum(balancing_quantities$performance_ratio==100)
mean(balancing_quantities$performance_ratio)
revenues = matrix(0,nrow = 1, ncol = 24)
balancing_quantities =  matrix(0,nrow = 1, ncol = 5)
hours_helpg_syst = hours_handicp_syst = 0
# since we bid at 12:00 the forecasted amount, we have access at closest to
# the forecast made at 11:00 the day before
dati_temp = matrix(noquote(unique(data_wp$dati)), nrow = length(unique(data_wp$dati)), ncol =1 )
dati_to_consider <- dati_temp[seq(1, length(dati_temp), 2)] # when the forecast is issued
# Turn plot_results to TRUE to see a plot every month
plot_results = TRUE
for (i in 1:(length(dati_to_consider)-1)){
# Find the index from where extract the wind data for each forecasted day to be considered
temp_dati = data_wp[data_wp$dati==dati_to_consider[i] & data_wp$hors==13,]
index_next_day = as.numeric(matrix(noquote((row(temp_dati, TRUE)[1])),1,1))
# assign the wind predictions for next day
wp_next_day = data_wp[(index_next_day-1):(index_next_day+22),]
# remember the date bidded (the following)
date_bidded = as.numeric(matrix(noquote(wp_next_day$date_daily[1])),1,1)
# since we bid what forecasted
contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
# in case of NA values
contracted[is.na(contracted)] <- 0
# what we actually produced
measured = as.numeric(wp_next_day$meas)/10^3 # MWh
# in case of NA values
measured[is.na(measured)] <- 0
# the prices we bid
bid_price = rep(0,24)
# what is the spot price for this day ?
elspot = elspot_price_2017[elspot_price_2017$date_daily==date_bidded,]$DK1
# average the missing values by looking at the hour before and after
for (j in 2:(length(elspot)-1)){
if(is.na(elspot[j])==TRUE) elspot[j] = 0.5*(elspot[j-1]+elspot[j+1])
}
# what are the regulation prices ?
reg_down = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_DOWN
reg_up = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_UP
# Are we scheduled
schedule = get_schedule(bid_price,elspot)
## plots
if((plot_results == TRUE) & (i%%31 == 0)){
cat(i)
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
points(1:24, measured, col = "black", type = "o")
legend("topright", legend = c("measurements","contracted = forecast" ), col = c("black", "red"),
pch = "o", lty = 1)
title(main = paste0("Date of interest : ", date_bidded))
}
# Balancing market clearing
balancing_results = balancing( contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# Performance ratio
pr = performance_ratio(contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# We remember the revenue generated hourly
new_revenues = balancing_results$revenues
new_surplus = balancing_results$surplus
new_shortage = balancing_results$shortage
new_down_regulation_costs = balancing_results$down_regulation_costs
new_up_regulation_costs = balancing_results$up_regulation_costs
new_balancing_quantities = c(new_surplus,new_shortage,new_down_regulation_costs,new_up_regulation_costs,
pr)#pr$gamma, pr$total_imbalance_costs, pr$revenues_PTU,
#mean(reg_up, na.rm = TRUE), mean(reg_down,na.rm = TRUE))
# How many times have we helped / handicaped the syst by bidding this way
hours_helpg_syst = hours_helpg_syst + balancing_results$hours_helpg_syst
hours_handicp_syst = hours_handicp_syst + balancing_results$hours_handicp_syst
if (i==1){
revenues = rbind(new_revenues)
balancing_quantities = rbind(new_balancing_quantities)
}
else {
revenues = rbind(revenues, new_revenues)
balancing_quantities = rbind(balancing_quantities, new_balancing_quantities)
}
}
mean(balancing_quantities$performance_ratio)
total_surplus = sum(balancing_quantities[,1], na.rm = TRUE)
total_shortage = sum(balancing_quantities[,2], na.rm = TRUE)
total_down_regulation_costs = sum(balancing_quantities[,3], na.rm = TRUE)
total_up_regulation_costs = sum(balancing_quantities[,4], na.rm = TRUE)
av_down_regulation_unit_costs = total_down_regulation_costs/total_surplus
av_up_regulation_unit_costs = total_up_regulation_costs/total_shortage
balancing_quantities = data.frame(surplus = balancing_quantities[,1],
shortage = balancing_quantities[,2],
down_regulation_costs = balancing_quantities[,3],
up_regulation_costs = balancing_quantities[,4],
performance_ratio = balancing_quantities[,5])#,
mean(balancing_quantities$performance_ratio)
contracted
i = 1
# Find the index from where extract the wind data for each forecasted day to be considered
temp_dati = data_wp[data_wp$dati==dati_to_consider[i] & data_wp$hors==13,]
index_next_day = as.numeric(matrix(noquote((row(temp_dati, TRUE)[1])),1,1))
# assign the wind predictions for next day
wp_next_day = data_wp[(index_next_day-1):(index_next_day+22),]
# remember the date bidded (the following)
date_bidded = as.numeric(matrix(noquote(wp_next_day$date_daily[1])),1,1)
date_bidded
index_next_day
temp_dati
View(temp_dati)
data_wp[(index_next_day-1):(index_next_day+22),]
#contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
data_wp[(index_next_day-2)]
View(data_wp[(index_next_day-2)]
)
View(data_wp[(index_next_day-2)]
View(data_wp[(index_next_day-2),]
index_next_day-2
data_wp$meas[12]
data_wp$meas[(index_next_day-2)]
as.numeric(data_wp$meas[(index_next_day-2)])
#contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
data_wp$meas[[(index_next_day-2)]]
rep(data_wp$meas[(index_next_day-2)], 24))
rep(data_wp$meas[(index_next_day-2)], 24)
(index_next_day-2)
View(data_wp)
# Bid #
## since we bid what forecasted ##
# contracted = as.numeric(wp_next_day$fore)/10^3 # MWh
## perfect forecast ##
#contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
## persistence forecast (using the last measured power value at 11h)
contracted = rep(data_wp$meas[(index_next_day-2)], 24)
# in case of NA values
contracted[is.na(contracted)] <- 0
contracted
for (i in 1:1){#:(length(dati_to_consider)-1)){
# Find the index from where extract the wind data for each forecasted day to be considered
temp_dati = data_wp[data_wp$dati==dati_to_consider[i] & data_wp$hors==13,]
index_next_day = as.numeric(matrix(noquote((row(temp_dati, TRUE)[1])),1,1))
# assign the wind predictions for next day
wp_next_day = data_wp[(index_next_day-1):(index_next_day+22),]
# remember the date bidded (the following)
date_bidded = as.numeric(matrix(noquote(wp_next_day$date_daily[1])),1,1)
# Bid #
## since we bid what forecasted ##
# contracted = as.numeric(wp_next_day$fore)/10^3 # MWh
## perfect forecast ##
#contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
## persistence forecast (using the last measured power value at 11h)
contracted = rep(data_wp$meas[(index_next_day-2)], 24)
# in case of NA values
contracted[is.na(contracted)] <- 0
# what we actually produced
measured = as.numeric(wp_next_day$meas)/10^3 # MWh
# in case of NA values
measured[is.na(measured)] <- 0
# the prices we bid
bid_price = rep(0,24)
# what is the spot price for this day ?
elspot = elspot_price_2017[elspot_price_2017$date_daily==date_bidded,]$DK1
# average the missing values by looking at the hour before and after
for (j in 2:(length(elspot)-1)){
if(is.na(elspot[j])==TRUE) elspot[j] = 0.5*(elspot[j-1]+elspot[j+1])
}
# what are the regulation prices ?
reg_down = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_DOWN
reg_up = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_UP
# Are we scheduled
schedule = get_schedule(bid_price,elspot)
## plots
if((plot_results == TRUE) & (i%%31 == 0)){
cat(i)
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
points(1:24, measured, col = "black", type = "o")
legend("topright", legend = c("measurements","contracted = forecast" ), col = c("black", "red"),
pch = "o", lty = 1)
title(main = paste0("Date of interest : ", date_bidded))
}
# Balancing market clearing
balancing_results = balancing( contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# Performance ratio
pr = performance_ratio(contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# We remember the revenue generated hourly
new_revenues = balancing_results$revenues
new_surplus = balancing_results$surplus
new_shortage = balancing_results$shortage
new_down_regulation_costs = balancing_results$down_regulation_costs
new_up_regulation_costs = balancing_results$up_regulation_costs
new_balancing_quantities = c(new_surplus,new_shortage,new_down_regulation_costs,new_up_regulation_costs,
pr)#pr$gamma, pr$total_imbalance_costs, pr$revenues_PTU,
#mean(reg_up, na.rm = TRUE), mean(reg_down,na.rm = TRUE))
# How many times have we helped / handicaped the syst by bidding this way
hours_helpg_syst = hours_helpg_syst + balancing_results$hours_helpg_syst
hours_handicp_syst = hours_handicp_syst + balancing_results$hours_handicp_syst
if (i==1){
revenues = rbind(new_revenues)
balancing_quantities = rbind(new_balancing_quantities)
}
else {
revenues = rbind(revenues, new_revenues)
balancing_quantities = rbind(balancing_quantities, new_balancing_quantities)
}
}
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
contracted
measured
as.numeric(matrix(data_wp$meas[(index_next_day-2)], 1,1))
# Bid #
## since we bid what forecasted ##
# contracted = as.numeric(wp_next_day$fore)/10^3 # MWh
## perfect forecast ##
#contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
## persistence forecast (using the last measured power value at 11h)
contracted = rep(as.numeric(matrix(data_wp$meas[(index_next_day-2)], 1,1)), 24)
contracted
for (i in 1:1){#:(length(dati_to_consider)-1)){
# Find the index from where extract the wind data for each forecasted day to be considered
temp_dati = data_wp[data_wp$dati==dati_to_consider[i] & data_wp$hors==13,]
index_next_day = as.numeric(matrix(noquote((row(temp_dati, TRUE)[1])),1,1))
# assign the wind predictions for next day
wp_next_day = data_wp[(index_next_day-1):(index_next_day+22),]
# remember the date bidded (the following)
date_bidded = as.numeric(matrix(noquote(wp_next_day$date_daily[1])),1,1)
# Bid #
## since we bid what forecasted ##
# contracted = as.numeric(wp_next_day$fore)/10^3 # MWh
## perfect forecast ##
#contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
## persistence forecast (using the last measured power value at 11h)
contracted = rep(as.numeric(matrix(data_wp$meas[(index_next_day-2)], 1,1)), 24)
# in case of NA values
contracted[is.na(contracted)] <- 0
# what we actually produced
measured = as.numeric(wp_next_day$meas)/10^3 # MWh
# in case of NA values
measured[is.na(measured)] <- 0
# the prices we bid
bid_price = rep(0,24)
# what is the spot price for this day ?
elspot = elspot_price_2017[elspot_price_2017$date_daily==date_bidded,]$DK1
# average the missing values by looking at the hour before and after
for (j in 2:(length(elspot)-1)){
if(is.na(elspot[j])==TRUE) elspot[j] = 0.5*(elspot[j-1]+elspot[j+1])
}
# what are the regulation prices ?
reg_down = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_DOWN
reg_up = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_UP
# Are we scheduled
schedule = get_schedule(bid_price,elspot)
## plots
if((plot_results == TRUE) & (i%%31 == 0)){
cat(i)
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
points(1:24, measured, col = "black", type = "o")
legend("topright", legend = c("measurements","contracted = forecast" ), col = c("black", "red"),
pch = "o", lty = 1)
title(main = paste0("Date of interest : ", date_bidded))
}
# Balancing market clearing
balancing_results = balancing( contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# Performance ratio
pr = performance_ratio(contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# We remember the revenue generated hourly
new_revenues = balancing_results$revenues
new_surplus = balancing_results$surplus
new_shortage = balancing_results$shortage
new_down_regulation_costs = balancing_results$down_regulation_costs
new_up_regulation_costs = balancing_results$up_regulation_costs
new_balancing_quantities = c(new_surplus,new_shortage,new_down_regulation_costs,new_up_regulation_costs,
pr)#pr$gamma, pr$total_imbalance_costs, pr$revenues_PTU,
#mean(reg_up, na.rm = TRUE), mean(reg_down,na.rm = TRUE))
# How many times have we helped / handicaped the syst by bidding this way
hours_helpg_syst = hours_helpg_syst + balancing_results$hours_helpg_syst
hours_handicp_syst = hours_handicp_syst + balancing_results$hours_handicp_syst
if (i==1){
revenues = rbind(new_revenues)
balancing_quantities = rbind(new_balancing_quantities)
}
else {
revenues = rbind(revenues, new_revenues)
balancing_quantities = rbind(balancing_quantities, new_balancing_quantities)
}
}
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
points(1:24, measured, col = "black", type = "o")
legend("topright", legend = c("measurements","contracted = forecast" ), col = c("black", "red"),
pch = "o", lty = 1)
balancing( contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
View(data_wp)
for (i in 1:(length(dati_to_consider)-1)){
# Find the index from where extract the wind data for each forecasted day to be considered
temp_dati = data_wp[data_wp$dati==dati_to_consider[i] & data_wp$hors==13,]
index_next_day = as.numeric(matrix(noquote((row(temp_dati, TRUE)[1])),1,1))
# assign the wind predictions for next day
wp_next_day = data_wp[(index_next_day-1):(index_next_day+22),]
# remember the date bidded (the following)
date_bidded = as.numeric(matrix(noquote(wp_next_day$date_daily[1])),1,1)
# Bid #
## since we bid what forecasted ##
# contracted = as.numeric(wp_next_day$fore)/10^3 # MWh
## perfect forecast ##
#contracted = as.numeric(wp_next_day$meas)/10^3 # MWh
## persistence forecast (using the last measured power value at 11h)
contracted = rep(as.numeric(matrix(data_wp$meas[(index_next_day-2)], 1,1)), 24)
# in case of NA values
contracted[is.na(contracted)] <- 0
# what we actually produced
measured = as.numeric(wp_next_day$meas)/10^3 # MWh
# in case of NA values
measured[is.na(measured)] <- 0
# the prices we bid
bid_price = rep(0,24)
# what is the spot price for this day ?
elspot = elspot_price_2017[elspot_price_2017$date_daily==date_bidded,]$DK1
# average the missing values by looking at the hour before and after
for (j in 2:(length(elspot)-1)){
if(is.na(elspot[j])==TRUE) elspot[j] = 0.5*(elspot[j-1]+elspot[j+1])
}
# what are the regulation prices ?
reg_down = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_DOWN
reg_up = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_UP
# Are we scheduled
schedule = get_schedule(bid_price,elspot)
## plots
if((plot_results == TRUE) & (i%%31 == 0)){
cat(i)
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
points(1:24, measured, col = "black", type = "o")
legend("topright", legend = c("measurements","contracted = forecast" ), col = c("black", "red"),
pch = "o", lty = 1)
title(main = paste0("Date of interest : ", date_bidded))
}
# Balancing market clearing
balancing_results = balancing( contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# Performance ratio
pr = performance_ratio(contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# We remember the revenue generated hourly
new_revenues = balancing_results$revenues
new_surplus = balancing_results$surplus
new_shortage = balancing_results$shortage
new_down_regulation_costs = balancing_results$down_regulation_costs
new_up_regulation_costs = balancing_results$up_regulation_costs
new_balancing_quantities = c(new_surplus,new_shortage,new_down_regulation_costs,new_up_regulation_costs,
pr)#pr$gamma, pr$total_imbalance_costs, pr$revenues_PTU,
#mean(reg_up, na.rm = TRUE), mean(reg_down,na.rm = TRUE))
# How many times have we helped / handicaped the syst by bidding this way
hours_helpg_syst = hours_helpg_syst + balancing_results$hours_helpg_syst
hours_handicp_syst = hours_handicp_syst + balancing_results$hours_handicp_syst
if (i==1){
revenues = rbind(new_revenues)
balancing_quantities = rbind(new_balancing_quantities)
}
else {
revenues = rbind(revenues, new_revenues)
balancing_quantities = rbind(balancing_quantities, new_balancing_quantities)
}
}
total_surplus = sum(balancing_quantities[,1], na.rm = TRUE)
total_shortage = sum(balancing_quantities[,2], na.rm = TRUE)
total_down_regulation_costs = sum(balancing_quantities[,3], na.rm = TRUE)
total_up_regulation_costs = sum(balancing_quantities[,4], na.rm = TRUE)
av_down_regulation_unit_costs = total_down_regulation_costs/total_surplus
av_up_regulation_unit_costs = total_up_regulation_costs/total_shortage
balancing_quantities = data.frame(surplus = balancing_quantities[,1],
shortage = balancing_quantities[,2],
down_regulation_costs = balancing_quantities[,3],
up_regulation_costs = balancing_quantities[,4],
performance_ratio = balancing_quantities[,5])#,
balancing_quantities
sum(balancing_quantities$performance_ratio>0)
