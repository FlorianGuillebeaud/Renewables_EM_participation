plot(cum_reveue, type = "l")
## Scenario 2 : Perfect forecast ##
scenario2 = scenario_output(2, data_wp, elspot_price_2017, regulating_prices_2017, plot_results = TRUE)
is.na(scenario2$revenues_hourly)
sum(is.na(scenario2$revenues_hourly))
scenario2$revenues_hourly[is.na(scenario2$revenues_hourly)] <- 0
plot(cum_reveue, type = "l")
cum_reveue2 = cumsum(scenario2$revenues_hourly)
lines(cum_reveue2, col = "blue")
## Scenario 1 : We bid what forecasted ##
scenario1 = scenario_output(1, data_wp, elspot_price_2017, regulating_prices_2017, plot_results = TRUE)
## Scenario 3 : Persistence forecast (using the last measured power value at 11h)
scenario3 = scenario_output(3, data_wp, elspot_price_2017, regulating_prices_2017, plot_results = TRUE)
## Scenario 4 : Random bid between 0 and CF*MaxProd MW
scenario4 = scenario_output(4, data_wp, elspot_price_2017, regulating_prices_2017, plot_results = TRUE)
## Scenario 5 : We bid a constant amount based on an estimated CF ##
scenario5 = scenario_output(5, data_wp, elspot_price_2017, regulating_prices_2017, plot_results = TRUE)
## Scenario 6 : We bid the median (0.5 quantile) ##
scenario6 = scenario_output(6, data_wp, elspot_price_2017, regulating_prices_2017, plot_results = TRUE)
contracted = as.numeric(matrix(wp_next_day$quantile.q50),1,1)/10^3
## Assignment 2 ##
## Renewables in electricity market ##
## Author : Florian Guillebeaud ##
###################################
###################################
# Scenario 1
# We bid the forecast
# We are scheduled at the spot price
###################################
###################################
setwd("~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2")
###################################
###################################
scenario_output = function(scenario, data_wp, elspot_price_2017, regulating_prices_2017, plot_results)
{
measured_rem = 0 # count to calculate CF a posteriori
revenues = ba_revenue = da_revenue = matrix(0,nrow = 1, ncol = 24)
balancing_quantities =  matrix(0,nrow = 1, ncol = 5)
hours_helpg_syst = hours_handicp_syst = 0
# since we bid at 12:00 the forecasted amount, we have access at closest to
# the forecast made at 11:00 the d-day
dati_temp = matrix(noquote(unique(data_wp$dati)), nrow = length(unique(data_wp$dati)), ncol =1 )
dati_to_consider <- dati_temp[seq(1, length(dati_temp), 2)] # when the forecast is issued
###################################
###################################
# Turn plot_results to TRUE to see a plot every month
for (i in 1:(length(dati_to_consider)-1)){
# Find the index from where extract the wind data for each forecasted day to be considered
temp_dati = data_wp[data_wp$dati==dati_to_consider[i] & data_wp$hors==13,]
index_next_day = as.numeric(matrix(noquote((row(temp_dati, TRUE)[1])),1,1))
# assign the wind predictions for next day
wp_next_day = data_wp[(index_next_day-1):(index_next_day+22),]
# remember the date bidded (the following)
date_bidded = as.numeric(matrix(noquote(wp_next_day$date_daily[1])),1,1)
###################################
# Quantity Bid #
###################################
## Scenario 1 : We bid what forecasted ##
if (scenario == 1){
contracted = as.numeric(matrix(wp_next_day$fore, 1 ,24))/10^3 # MWh
contracted_leg = "forecasted"
}
## Scenario 2 : Perfect forecast ##
if (scenario == 2) {
contracted = as.numeric(matrix(wp_next_day$meas, 1, 24))/10^3 # MWh
contracted_leg = "perfect forecast"
}
## Scenario 3 : Persistence forecast (using the last measured power value at 11h)
if (scenario == 3){
if (i==1) {
# We don't the data for this day / we consider the forecast
temp_quantity = as.numeric(matrix(wp_next_day$fore[1]),1,1)
contracted = rep(temp_quantity/10^3,24)
}else{
# We take the last measured power value at 11h
index_last_meas = index_next_day-28-1
contracted = rep(as.numeric(matrix(data_wp[index_last_meas,]$meas,1,1))/10^3,24)
}
contracted_leg = "persistence forecast"
}
## Scenario 4 : Random bid between 0 and 20 MW
if (scenario == 4) {
contracted = runif(24,0,80) # MW
contracted_leg = "Random bid"
}
## Scenario 5 : We bid a constant amount based on an estimated CF=0.5 ##
if (scenario == 5) {
contracted = rep(80,24) # MW
contracted_leg = "CF x maxProd"
}
## Scenario 6 : We bid the median (0.5 quantile) ##
if (scenario == 6) {
contracted = as.numeric(matrix(wp_next_day$quantile.q50),1,1)/10^3
contracted_leg = "Median (0.5 quantile)"
}
## Scenario 7 : We bid the best quantile
if (scenario == 7) {
contracted = as.numeric(matrix(wp_next_day$fore), 1,1)
contracted = get_best_quantile(contracted, wp_next_day)/10^3
contracted_leg = "best Quantile"
}
###################################
###################################
# in case of NA values
contracted[is.na(contracted)] <- 0
# what we actually produced
measured = as.numeric(matrix(wp_next_day$meas,1,24))/10^3 # MWh
# in case of NA values
measured[is.na(measured)] <- 0
# we remember the measures to compute the a-posteriori CF
measured_rem = measured_rem + sum(measured)
# the prices we bid
bid_price = rep(0,24)
# what is the spot price for this day ?
elspot = elspot_price_2017[elspot_price_2017$date_daily==date_bidded,]$DK1
# average the missing values by looking at the hour before and after
for (j in 2:(length(elspot)-1)){
if(is.na(elspot[j])==TRUE) {
elspot[j] = 0.5*(elspot[j-1]+elspot[j+1])
cat(paste0("Missing value in the spot price dataset : index ", j), "\n")
}
}
# what are the regulation prices ?
reg_down = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_DOWN
for (j in 1:length(reg_down)){
if(is.na(reg_down[j])==TRUE){
reg_down[j]<-elspot[j] # if reg_price missing : it's assumed it's spot_price
cat(paste0("Missing value in the regulating down dataset : index ", j), "\n")
}}
reg_up = regulating_prices_2017[regulating_prices_2017$date_daily==date_bidded,]$DK1_UP
for (j in 1:length(reg_up)){
if(is.na(reg_up[j])==TRUE){
reg_up[j]<-elspot[j] # if reg_price missing : it's assumed it's spot_price
cat(paste0("Missing value in the regulating up dataset : index ", j), "\n")
}}
# Are we scheduled ?
schedule = get_schedule(bid_price,elspot)
## plots
if((plot_results == TRUE) & (i%%31 == 0)){
cat(paste0("look at the : " , i), "\n")
plot(elspot, type = "o", ylab = "spot price [DKK/MWh]",xlab = "Time of the day [h]",
ylim = c(min(reg_down, na.rm = TRUE), max(reg_up, na.rm = TRUE)))
points(reg_up, type = "o", col = "red", lty = 4)
points(reg_down, type = "o", col = "blue", lty = 2)
legend("topleft", legend = c("spot price", "up-regulation price", "down-regulation price"),
col = c("black", "red", "blue"), lty = c(1,4,2), pch = "o", cex = 0.75)
title(main = paste0("Date of interest : ", date_bidded))
plot(1:24,contracted, col = "red", type = "o", ylim = c(min(contracted,measured),max(contracted,measured)), ylab = "power [MW]", xlab = "Time of the day [h]")
points(1:24, measured, col = "black", type = "o")
legend("topright", legend = c("measurements",paste0("contracted = ", contracted_leg )), col = c("black", "red"),
pch = "o", lty = 1)
title(main = paste0("Date of interest : ", date_bidded))
if (scenario == 7){
plot_quantile(wp_next_day, date_bidded, contracted, i)
}
}
# Balancing market clearing
balancing_results = balancing( day = i,
contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# Performance ratio
pr = performance_ratio(day = i ,
contracted = contracted,
measure = measured,
schedule = schedule,
reg_up = reg_up,
reg_down = reg_down)
# We remember the revenue generated hourly
new_da_revenue = balancing_results$da_revenue
new_ba_revenue = balancing_results$ba_revenue
new_revenues = balancing_results$revenues
new_surplus = balancing_results$surplus
new_shortage = balancing_results$shortage
new_down_regulation_costs = balancing_results$down_regulation_costs
new_up_regulation_costs = balancing_results$up_regulation_costs
new_balancing_quantities = c(new_surplus,new_shortage,new_down_regulation_costs,new_up_regulation_costs,
pr)
# How many times have we helped / handicaped the syst by bidding this way
hours_helpg_syst = hours_helpg_syst + balancing_results$hours_helpg_syst
hours_handicp_syst = hours_handicp_syst + balancing_results$hours_handicp_syst
if (i==1){
da_revenue = rbind(new_da_revenue)
ba_revenue = rbind(new_ba_revenue)
revenues = rbind(new_revenues)
balancing_quantities = rbind(new_balancing_quantities)
}
else {
da_revenue = rbind(da_revenue,new_da_revenue)
ba_revenue = rbind(ba_revenue, new_ba_revenue)
revenues = rbind(revenues, new_revenues)
balancing_quantities = rbind(balancing_quantities, new_balancing_quantities)
}
}
###################################
###################################
# A posteriori CF
CF = (mean(measured_rem)/(24*length(dati_to_consider)))/160
###################################
###################################
total_surplus = sum(balancing_quantities[,1], na.rm = TRUE)
total_shortage = sum(balancing_quantities[,2], na.rm = TRUE)
total_down_regulation_costs = sum(balancing_quantities[,3], na.rm = TRUE)
total_up_regulation_costs = sum(balancing_quantities[,4], na.rm = TRUE)
av_down_regulation_unit_costs = total_down_regulation_costs/total_surplus
av_up_regulation_unit_costs = total_up_regulation_costs/total_shortage
###################################
###################################
# Sort the results into one table
balancing_quantities = data.frame(total_prod = measured_rem,
surplus = balancing_quantities[,1],
shortage = balancing_quantities[,2],
down_regulation_costs = balancing_quantities[,3],
up_regulation_costs = balancing_quantities[,4],
performance_ratio = balancing_quantities[,5])
results = list(da_revenue_hourly = da_revenue,
ba_revenue_hourly = ba_revenue,
revenues_hourly = revenues,
daily_revenue = rowSums(revenues),
balancing_quantities = balancing_quantities,
total_surplus = total_surplus,
total_shortage = total_shortage,
total_down_regulation_costs = total_down_regulation_costs,
total_up_regulation_costs = total_up_regulation_costs,
av_down_regulation_unit_costs = av_down_regulation_unit_costs,
av_up_regulation_unit_costs = av_up_regulation_unit_costs,
CF_aposteriori = CF)
}
## Scenario 6 : We bid the median (0.5 quantile) ##
scenario6 = scenario_output(6, data_wp, elspot_price_2017, regulating_prices_2017, plot_results = TRUE)
# plot the optimal first
plot(sum(is.na(scenario2$revenues_hourly)), type = 'l')
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly)), type = 'l')
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly), type = 'l')
lines(cumsum(scenario1$revenues_hourly), type = 'l', lty = 2)
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly), type = 'l')
lines(cumsum(scenario1$revenues_hourly), type = 'l', lty = 2)
lines(cumsum(scenario1$revenues_hourly), type = 'l', lty = 2, col = "red")
###################################
###################################
# Cumulative plot
scenario1$revenues_hourly[is.na(scenario1$revenues_hourly)] <- 0
scenario2$revenues_hourly[is.na(scenario2$revenues_hourly)] <- 0
scenario3$revenues_hourly[is.na(scenario3$revenues_hourly)] <- 0
scenario4$revenues_hourly[is.na(scenario4$revenues_hourly)] <- 0
scenario5$revenues_hourly[is.na(scenario5$revenues_hourly)] <- 0
scenario6$revenues_hourly[is.na(scenario6$revenues_hourly)] <- 0
scenario7$revenues_hourly[is.na(scenario7$revenues_hourly)] <- 0
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly), type = 'l')
lines(cumsum(scenario1$revenues_hourly), type = 'l', lty = 2, col = "red")
lines(cumsum(scenario3$revenues_hourly), type = 'l', lty = 2, col = "green")
lines(cumsum(scenario4$revenues_hourly), type = 'l', col = "blue")
lines(cumsum(scenario5$revenues_hourly), type = 'l', col = "orange")
lines(cumsum(scenario6$revenues_hourly), type = 'l', lty = 2)
lines(cumsum(scenario6$revenues_hourly), type = 'l', lty = 2, col "yellow")
lines(cumsum(scenario6$revenues_hourly), type = 'l', lty = 2, col = "yellow")
lines(cumsum(scenario7$revenues_hourly), type = 'l', col = "purple")
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly), type = 'l')
lines(cumsum(scenario7$revenues_hourly), type = 'l', col = "purple")
lines(cumsum(scenario6$revenues_hourly), type = 'l', lty = 2, col = "yellow")
cumsum(scenario6$revenues_hourly) == cumsum(scenario7$revenues_hourly)
length(cumsum(scenario6$revenues_hourly))
cumsum(scenario6$revenues_hourly)[8760]
cumsum(scenario7$revenues_hourly)[8760]
cumsum(scenario5$revenues_hourly)[8760]
cumsum(scenario4$revenues_hourly)[8760]
###################################
###################################
# Cumulative balancing / day ahead revenue plot
scenario1$da_revenue_hourly[is.na(scenario1$da_revenue_hourly)] <- 0
scenario1$ba_revenue_hourly[is.na(scenario1$ba_revenue_hourly)] <- 0
plot(cumsum(scenario1$da_revenue_hourly), tyle = 'l')
plot(cumsum(scenario1$da_revenue_hourly), type = 'l')
plot(cumsum(scenario1$ba_revenue_hourly), type = 'l')
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly)/10^6, type = 'l')
lines(cumsum(scenario1$revenues_hourly)/10^6, type = 'l', lty = 2, col = "red")
lines(cumsum(scenario3$revenues_hourly)/10^6, type = 'l', lty = 2, col = "green")
lines(cumsum(scenario4$revenues_hourly)/10^6, type = 'l', col = "blue")
lines(cumsum(scenario5$revenues_hourly)/10^6, type = 'l', col = "orange")
lines(cumsum(scenario6$revenues_hourly)/10^6, type = 'l', lty = 2, col = "yellow")
lines(cumsum(scenario7$revenues_hourly)/10^6, type = 'l', col = "purple")
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly)/10^7, type = 'l')
lines(cumsum(scenario1$revenues_hourly)/10^7, type = 'l', lty = 2, col = "red")
lines(cumsum(scenario3$revenues_hourly)/10^7, type = 'l', lty = 2, col = "green")
lines(cumsum(scenario4$revenues_hourly)/10^7, type = 'l', col = "blue")
lines(cumsum(scenario5$revenues_hourly)/10^7, type = 'l', col = "orange")
lines(cumsum(scenario6$revenues_hourly)/10^7, type = 'l', lty = 2, col = "yellow")
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly)/10^7, type = 'l')
lines(cumsum(scenario1$revenues_hourly)/10^7, type = 'l', lty = 2, col = "red")
lines(cumsum(scenario6$revenues_hourly)/10^7, type = 'l', lty = 2, col = "yellow")
cumsum(scenario6$revenues_hourly) == cumsum(scenario1$revenues_hourly)
# plot the optimal first
plot(cumsum(scenario2$revenues_hourly)/10^7[0:200], type = 'l')
# plot the optimal first
plot((cumsum(scenario2$revenues_hourly)/10^7)[0:200], type = 'l')
lines((cumsum(scenario1$revenues_hourly)/10^7)[0:200], type = 'l', lty = 2, col = "red")
plot(cumsum(scenario1$da_revenue_hourly)/10^6, type = 'l')
plot(cumsum(scenario1$da_revenue_hourly)/10^7, ylim = c(-15,15) type = 'l')
plot(cumsum(scenario1$da_revenue_hourly)/10^7, ylim = c(-15,15) type = 'l')
plot(cumsum(scenario1$da_revenue_hourly)/10^7, ylim = c(-15,15), type = 'l')
plot(cumsum(scenario1$ba_revenue_hourly)/10^7, type = 'l')
plot(cumsum(scenario1$da_revenue_hourly)/10^7, ylim = c(-15,15), type = 'l')
lines(cumsum(scenario1$ba_revenue_hourly)/10^7, type = 'l')
scenario2$da_revenue_hourly[is.na(scenario2$da_revenue_hourly)] <- 0
scenario2$ba_revenue_hourly[is.na(scenario2$ba_revenue_hourly)] <- 0
lines(cumsum(scenario2$da_revenue_hourly)/10^7, type = 'l')
lines(cumsum(scenario2$ba_revenue_hourly)/10^7, type = 'l')
lines(cumsum(scenario2$ba_revenue_hourly)/10^7, type = 'l', col = "gree")
lines(cumsum(scenario2$da_revenue_hourly)/10^7, type = 'l', col = "green")
lines(cumsum(scenario2$ba_revenue_hourly)/10^7, type = 'l', col = "green")
abline(h=0)
plot(cumsum(scenario1$da_revenue_hourly)/10^7, ylim = c(-15,15), type = 'l')
abline(h=0)
lines(cumsum(scenario1$ba_revenue_hourly)/10^7, type = 'l')
lines(cumsum(scenario2$da_revenue_hourly)/10^7, type = 'l', col = "green")
lines(cumsum(scenario2$ba_revenue_hourly)/10^7, type = 'l', col = "green")
scenario7$da_revenue_hourly[is.na(scenario7$da_revenue_hourly)] <- 0
scenario7$ba_revenue_hourly[is.na(scenario7$ba_revenue_hourly)] <- 0
lines(cumsum(scenario7$da_revenue_hourly)/10^7, type = 'l', col = "red")
lines(cumsum(scenario7$ba_revenue_hourly)/10^7, type = 'l', col = "red")
plot(cumsum(scenario1$da_revenue_hourly)/10^7, ylim = c(-2,15), type = 'l')
abline(h=0)
lines(cumsum(scenario1$ba_revenue_hourly)/10^7, type = 'l')
lines(cumsum(scenario2$da_revenue_hourly)/10^7, type = 'l', col = "green")
lines(cumsum(scenario2$ba_revenue_hourly)/10^7, type = 'l', col = "green")
lines(cumsum(scenario7$da_revenue_hourly)/10^7, type = 'l', col = "red")
lines(cumsum(scenario7$ba_revenue_hourly)/10^7, type = 'l', col = "red")
prices = data.frame(elspot = elspot_price_2016$DK1,
reg_up = regulating_prices_2016$DK1_UP,
reg_dw = regulating_prices_2016$DK1_DOWN)
View(prices)
setwd("~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2")
source("C_Code/read_wp.R") # ! quantities in kW
setwd("~/Documents/DTU/B_Semester-2/31761_Renew_ElectricityMarkets/Assignments/Assignment2")
source("C_Code/read_regulations.R")
source("C_Code/read_elspot.R") # ! price is given in DKK/MWh
prices = data.frame(elspot = elspot_price_2016$DK1,
reg_up = regulating_prices_2016$DK1_UP,
reg_dw = regulating_prices_2016$DK1_DOWN)
View(prices)
prices_17 = data.frame(elspot = elspot_price_2017$DK1,
reg_up = regulating_prices_2017$DK1_UP,
reg_dw = regulating_prices_2017$DK1_DOWN)
View(prices_17)
plot(prices_17$elspot[1:72], type = 'o')
points(prices_17$reg_up[1:72], pch = 2)
points(prices_17$reg_up[1:72], pch = 3)
points(prices_17$reg_up[1:72], pch = 3, col = "red")
points(prices_17$reg_dw[1:72], pch = 3, col = "blue")
View(prices_17)
plot(prices_17$elspot[1:72], type = 'o')
points(prices_17$reg_up[1:72], pch = 3, col = "red")
points(prices_17$reg_dw[1:72], pch = 3, col = "blue")
lines(prices_17$reg_up[1:72], lty = 2, col = "red")
lines(prices_17$reg_dw[1:72], lty = 2, col = "blue")
lines(prices_17$reg_dw[1:72], lty = 1, col = "blue")
View(prices_17)
plot(prices_17$elspot[1:72], type = 'o')
points(prices_17$reg_up[1:72], pch = 3, col = "red")
lines(prices_17$reg_up[1:72], lty = 2, col = "red")
points(prices_17$reg_dw[1:72], pch = 3, col = "blue")
lines(prices_17$reg_dw[1:72], lty = 1, col = "blue")
plot(prices_17$elspot[1:12], type = 'o')
points(prices_17$reg_up[1:12], pch = 3, col = "red")
lines(prices_17$reg_up[1:12], lty = 2, col = "red")
points(prices_17$reg_dw[1:12], pch = 3, col = "blue")
lines(prices_17$reg_dw[1:12], lty = 1, col = "blue")
plot(prices_17$elspot[1:5], type = 'o')
points(prices_17$reg_up[1:5], pch = 3, col = "red")
lines(prices_17$reg_up[1:5], lty = 2, col = "red")
View(prices_17)
prices_16 = data.frame(reg_dw = regulating_prices_2016$DK1_DOWN,
elspot = elspot_price_2016$DK1,
reg_up = regulating_prices_2016$DK1_UP)
View(prices_16)
prices_17 = data.frame(reg_dw = regulating_prices_2017$DK1_DOWN
elspot = elspot_price_2017$DK1,
reg_up = regulating_prices_2017$DK1_UP)
View(prices_17)
plot(prices_17$elspot[1:5], type = 'o')
View(prices_16)
prices_17 = data.frame(reg_dw = regulating_prices_2017$DK1_DOWN
elspot = elspot_price_2017$DK1,
reg_up = regulating_prices_2017$DK1_UP)
View(prices_17)
prices_17 = data.frame(reg_dw = regulating_prices_2017$DK1_DOWN,
elspot = elspot_price_2017$DK1,
reg_up = regulating_prices_2017$DK1_UP)
View(prices_17)
source("C_Code/read_prod.R")
View(prod_2016)
View(prod_DK1_16-
View(prod_DK1_16)
View(dataset)
### REGULATION POWER
reg_prod_2016 <- read_excel("D_Data/reg_prod_2016.xlsx", skip = 2)
View(reg_prod_2016)
reg_prod_2016 = reg_prod_2016[,-(3:12)]
### REGULATION POWER
reg_prod_2016 <- read_excel("D_Data/reg_prod_2016.xlsx", skip = 2)
reg_prod_2016 = reg_prod_2016[,-(3:21)]
### REGULATION POWER
reg_prod_2016 <- read_excel("D_Data/reg_prod_2016.xlsx", skip = 2)
reg_prod_2016 = reg_prod_2016[,-(3:22)]
### REGULATION POWER
reg_prod_2017 <- read_excel("D_Data/reg_prod_2017.xlsx", skip = 2)
reg_prod_2017 = reg_prod_2017[,-(3:22)]
View(reg_prod_2017)
#### 2017 ####
dataset <- read_excel("D_Data/prod_DK_2017.xlsx", skip = 3)
prod_DK1_17 = dataset[,-(4:5)]
### REGULATION POWER
reg_prod_2016 <- read_excel("D_Data/reg_prod_2016.xlsx", skip = 3)
reg_prod_2016 = reg_prod_2016[,-(3:22)]
### REGULATION POWER
reg_prod_2017 <- read_excel("D_Data/reg_prod_2017.xlsx", skip = 3)
reg_prod_2017 = reg_prod_2017[,-(3:22)]
View(reg_prod_2017)
prices_16 = data.frame(prod_down = reg_prod_2016$Down__10,
reg_dw = regulating_prices_2016$DK1_DOWN,
elspot = elspot_price_2016$DK1,
reg_up = regulating_prices_2016$DK1_UP,
prod_up = reg_prod_2016$Up__10)
View(prices_16)
reg_prod_2016$Up__10
lenght(reg_prod_2016$Down__10)
length(reg_prod_2016$Down__10)
View(reg_prod_2017)
lenght(reg_prod_2017$Down__10)
length(reg_prod_2017$Down__10)
length(regulating_prices_2016$DK1_DOWN)
length(reg_prod_2016$Down__10)
reg_prod_2016 = reg_prod_2016[,-(5:6)]
a = noquote(paste0(reg_prod_2016$Hours[1:(length(reg_prod_2016$Hours)-1)]))
a = gsub(a,pattern = "-", replacement = "")
a = gsub(a,pattern = " ", replacement = "")
a = sub("^(\\d{2}).*$", "\\1", a)
#### 2016 ####
dataset <- read_excel("D_Data/prod_DK_2016.xlsx", skip = 2)
prod_DK1_16 = dataset[,-(4:5)]
View(prod_DK1_16)
b = noquote(paste0(reg_prod_2016$X__1[1:(length(reg_prod_2016$X__1)-1)]))
reg_prod_2016$X__1
b_daily = gsub(b,pattern = "-", replacement = "")
b_daily
a_hourly = as.numeric(paste0(b_daily[1:length(b_daily)],a[1:length(a)]))
a_daily = sub("^(\\d{8}).*$", "\\1", a_hourly)
a_monthly = sub("^(\\d{6}).*$", "\\1", a_daily)
reg_prod_2016 = data.frame(date_monthly = a_monthly, date_daily = a_daily,
date_hourly = a_hourly, up_DK1 = reg_prod_2016$Up__10[1:(length(reg_prod_2016$Up__10)-1)])
View(reg_prod_2016)
reg_prod_2016 = data.frame(date_monthly = a_monthly, date_daily = a_daily,
date_hourly = a_hourly, up_DK1 = reg_prod_2016$Up__10[1:(length(reg_prod_2016$Up__10)-1)],
dw_DK1 = reg_prod_2016$Down__10[1:(length(reg_prod_2016$Down__10)-1)])
### REGULATION POWER
reg_prod_2016 <- read_excel("D_Data/reg_prod_2016.xlsx", skip = 3)
reg_prod_2016 = reg_prod_2016[,-(3:22)]
reg_prod_2016 = reg_prod_2016[,-(5:6)]
a = noquote(paste0(reg_prod_2016$Hours[1:(length(reg_prod_2016$Hours)-1)]))
a = gsub(a,pattern = "-", replacement = "")
a = gsub(a,pattern = " ", replacement = "")
a = sub("^(\\d{2}).*$", "\\1", a)
b = noquote(paste0(reg_prod_2016$X__1[1:(length(reg_prod_2016$X__1)-1)]))
b_daily = gsub(b,pattern = "-", replacement = "")
a_hourly = as.numeric(paste0(b_daily[1:length(b_daily)],a[1:length(a)]))
a_daily = sub("^(\\d{8}).*$", "\\1", a_hourly)
a_monthly = sub("^(\\d{6}).*$", "\\1", a_daily)
reg_prod_2016 = data.frame(date_monthly = a_monthly, date_daily = a_daily,
date_hourly = a_hourly, up_DK1 = reg_prod_2016$Up__10[1:(length(reg_prod_2016$Up__10)-1)],
dw_DK1 = reg_prod_2016$Down__10[1:(length(reg_prod_2016$Down__10)-1)])
View(reg_prod_2016)
View(reg_prod_2016)
### REGULATION POWER
reg_prod_2017 <- read_excel("D_Data/reg_prod_2017.xlsx", skip = 3)
reg_prod_2017 = reg_prod_2017[,-(3:22)]
reg_prod_2017 = reg_prod_2017[,-(5:6)]
a = noquote(paste0(reg_prod_2017$Hours[1:(length(reg_prod_2017$Hours)-1)]))
a = gsub(a,pattern = "-", replacement = "")
a = gsub(a,pattern = " ", replacement = "")
a = sub("^(\\d{2}).*$", "\\1", a)
b = noquote(paste0(reg_prod_2017$X__1[1:(length(reg_prod_2017$X__1)-1)]))
b_daily = gsub(b,pattern = "-", replacement = "")
a_hourly = as.numeric(paste0(b_daily[1:length(b_daily)],a[1:length(a)]))
a_daily = sub("^(\\d{8}).*$", "\\1", a_hourly)
a_monthly = sub("^(\\d{6}).*$", "\\1", a_daily)
reg_prod_2017 = data.frame(date_monthly = a_monthly, date_daily = a_daily,
date_hourly = a_hourly, up_DK1 = reg_prod_2017$Up__10[1:(length(reg_prod_2017$Up__10)-1)],
dw_DK1 = reg_prod_2017$Down__10[1:(length(reg_prod_2017$Down__10)-1)])
length( reg_prod_2016$dw_DK1)
length(regulating_prices_2016$DK1_DOWN)
prices_16 = data.frame(prod_down = reg_prod_2016$dw_DK1,
reg_dw = regulating_prices_2016$DK1_DOWN,
elspot = elspot_price_2016$DK1,
reg_up = regulating_prices_2016$DK1_UP,
prod_up = reg_prod_2016$up_DK1)
View(prices_16)
prices_17 = data.frame(prod_down = reg_prod_2017$dw_DK1,
reg_dw = regulating_prices_2017$DK1_DOWN,
elspot = elspot_price_2017$DK1,
reg_up = regulating_prices_2017$DK1_UP,
prod_up = reg_prod_2017$up_DK1)
View(prices_17)
